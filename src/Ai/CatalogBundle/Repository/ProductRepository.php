<?php
/**
 * AiCatalogBundle
 *
 * PHP Version 7
 *
 * @category Repository
 * @package  Ai\CatalogBundle\Repository
 * @author   Ruslan Muriev <ruslana.net@gmail.com>
 * @license  https://github.com/ruslana-net/ai-catalog-api/LICENSE MIT License
 * @link     https://github.com/ruslana-net/ai-catalog-api
 */

namespace Ai\CatalogBundle\Repository;

use \Doctrine\ORM\Query;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;

/**
 * ProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @param string|null $tagsFilter search by tags name news,another tag,etc
     * @param string|null $searchString search by name and descr
     * @param int|null $maxResults limit
     *
     * @return Query
     */
    public function findByFilters(
        string $tagsFilter = null,
        string $searchString = null,
        int $maxResults = null
    ) : array
    {
        $qb = $this->createQueryBuilder('a');
        $qb
            ->select('a, c, t')
            ->orderBy('a.position', 'ASC')
            ->where("a.enabled=1")
            ->leftJoin('a.category', 'c')
            ->leftJoin('a.tags', 't');

        //Search string filter
        if (!$searchString) {
            $qb->andWhere(
                $qb->expr()->orX(
                    $qb->expr()->like('a.name', ':search'),//TODO add indexes
                    $qb->expr()->like('a.descr', ':search')
                )
            );
            $qb->setParameter('search', $searchString . '%');
        }

        //Tags filter
        if ($tagsFilter !== null) {
            $tags = $tagsFilter ? explode(',', $tagsFilter) : null;

            if (!empty($tags)) {
                $orX = $qb->expr()->orX();

                foreach ($tags as $k => $tag) {
                    $orX->add($qb->expr()->eq("t.name", ":tag$k"));
                    $qb->setParameter("tag$k", $tag);
                }

                if ($orX->count() > 0) {
                    $qb->andWhere($orX);
                }
            }
        }

        //Max limit
        if (null !== $maxResults) {
            $qb->setMaxResults($maxResults);
        }

        return $qb->getQuery()->getArrayResult();
    }

    /**
     * Get product with filtered fields
     *
     * @param $id
     * @return array
     */
    public function findOneById($id) : array
    {
        $qb = $this->createQueryBuilder('a');

        $qb
            ->select('a, c, t')
            ->orderBy('a.position', 'ASC')
            ->where("a.enabled=1 AND a.id=:id")
            ->leftJoin('a.category', 'c')
            ->leftJoin('a.tags', 't')
            ->setParameter('id', $id);

        $result = $qb->getQuery()->getArrayResult();

        if(empty($result)){
            throw new NotFoundHttpException('Product not fount');
        }

        return array_shift($result);
    }
}
